// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: swupdate.proto

package swupdatesvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdaterClient is the client API for Updater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdaterClient interface {
	GetAvailableUpdateBundles(ctx context.Context, in *GetAvailableUpdateBundlesRequest, opts ...grpc.CallOption) (*GetAvailableUpdateBundlesResponse, error)
	InstallUpdateBundle(ctx context.Context, in *InstallUpdateBundleRequest, opts ...grpc.CallOption) (Updater_InstallUpdateBundleClient, error)
	Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStatusResponse, error)
	Rollback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RollbackResponse, error)
	GetClientInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetClientInformationResponse, error)
	GetInstalledBundleInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetInstalledBundleInformationResponse, error)
}

type updaterClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdaterClient(cc grpc.ClientConnInterface) UpdaterClient {
	return &updaterClient{cc}
}

func (c *updaterClient) GetAvailableUpdateBundles(ctx context.Context, in *GetAvailableUpdateBundlesRequest, opts ...grpc.CallOption) (*GetAvailableUpdateBundlesResponse, error) {
	out := new(GetAvailableUpdateBundlesResponse)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/GetAvailableUpdateBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterClient) InstallUpdateBundle(ctx context.Context, in *InstallUpdateBundleRequest, opts ...grpc.CallOption) (Updater_InstallUpdateBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Updater_ServiceDesc.Streams[0], "/swupdate.Updater/InstallUpdateBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &updaterInstallUpdateBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Updater_InstallUpdateBundleClient interface {
	Recv() (*InstallUpdateBundleResponse, error)
	grpc.ClientStream
}

type updaterInstallUpdateBundleClient struct {
	grpc.ClientStream
}

func (x *updaterInstallUpdateBundleClient) Recv() (*InstallUpdateBundleResponse, error) {
	m := new(InstallUpdateBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updaterClient) Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterClient) Rollback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RollbackResponse, error) {
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterClient) GetClientInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetClientInformationResponse, error) {
	out := new(GetClientInformationResponse)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/GetClientInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterClient) GetInstalledBundleInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetInstalledBundleInformationResponse, error) {
	out := new(GetInstalledBundleInformationResponse)
	err := c.cc.Invoke(ctx, "/swupdate.Updater/GetInstalledBundleInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdaterServer is the server API for Updater service.
// All implementations must embed UnimplementedUpdaterServer
// for forward compatibility
type UpdaterServer interface {
	GetAvailableUpdateBundles(context.Context, *GetAvailableUpdateBundlesRequest) (*GetAvailableUpdateBundlesResponse, error)
	InstallUpdateBundle(*InstallUpdateBundleRequest, Updater_InstallUpdateBundleServer) error
	Reboot(context.Context, *Empty) (*Empty, error)
	GetStatus(context.Context, *Empty) (*GetStatusResponse, error)
	Rollback(context.Context, *Empty) (*RollbackResponse, error)
	GetClientInformation(context.Context, *Empty) (*GetClientInformationResponse, error)
	GetInstalledBundleInformation(context.Context, *Empty) (*GetInstalledBundleInformationResponse, error)
	mustEmbedUnimplementedUpdaterServer()
}

// UnimplementedUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedUpdaterServer struct {
}

func (UnimplementedUpdaterServer) GetAvailableUpdateBundles(context.Context, *GetAvailableUpdateBundlesRequest) (*GetAvailableUpdateBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUpdateBundles not implemented")
}
func (UnimplementedUpdaterServer) InstallUpdateBundle(*InstallUpdateBundleRequest, Updater_InstallUpdateBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallUpdateBundle not implemented")
}
func (UnimplementedUpdaterServer) Reboot(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedUpdaterServer) GetStatus(context.Context, *Empty) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedUpdaterServer) Rollback(context.Context, *Empty) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedUpdaterServer) GetClientInformation(context.Context, *Empty) (*GetClientInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInformation not implemented")
}
func (UnimplementedUpdaterServer) GetInstalledBundleInformation(context.Context, *Empty) (*GetInstalledBundleInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstalledBundleInformation not implemented")
}
func (UnimplementedUpdaterServer) mustEmbedUnimplementedUpdaterServer() {}

// UnsafeUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdaterServer will
// result in compilation errors.
type UnsafeUpdaterServer interface {
	mustEmbedUnimplementedUpdaterServer()
}

func RegisterUpdaterServer(s grpc.ServiceRegistrar, srv UpdaterServer) {
	s.RegisterService(&Updater_ServiceDesc, srv)
}

func _Updater_GetAvailableUpdateBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableUpdateBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).GetAvailableUpdateBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/GetAvailableUpdateBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).GetAvailableUpdateBundles(ctx, req.(*GetAvailableUpdateBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Updater_InstallUpdateBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallUpdateBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdaterServer).InstallUpdateBundle(m, &updaterInstallUpdateBundleServer{stream})
}

type Updater_InstallUpdateBundleServer interface {
	Send(*InstallUpdateBundleResponse) error
	grpc.ServerStream
}

type updaterInstallUpdateBundleServer struct {
	grpc.ServerStream
}

func (x *updaterInstallUpdateBundleServer) Send(m *InstallUpdateBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Updater_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).Reboot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Updater_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Updater_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).Rollback(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Updater_GetClientInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).GetClientInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/GetClientInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).GetClientInformation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Updater_GetInstalledBundleInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterServer).GetInstalledBundleInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swupdate.Updater/GetInstalledBundleInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterServer).GetInstalledBundleInformation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Updater_ServiceDesc is the grpc.ServiceDesc for Updater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Updater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swupdate.Updater",
	HandlerType: (*UpdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableUpdateBundles",
			Handler:    _Updater_GetAvailableUpdateBundles_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Updater_Reboot_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Updater_GetStatus_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Updater_Rollback_Handler,
		},
		{
			MethodName: "GetClientInformation",
			Handler:    _Updater_GetClientInformation_Handler,
		},
		{
			MethodName: "GetInstalledBundleInformation",
			Handler:    _Updater_GetInstalledBundleInformation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallUpdateBundle",
			Handler:       _Updater_InstallUpdateBundle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "swupdate.proto",
}
